<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="AutoImportSettings">
    <option name="autoReloadType" value="SELECTIVE" />
  </component>
  <component name="ChangeListManager">
    <list default="true" id="25e906b7-a31e-44da-864f-8e8d2e26e484" name="Changes" comment="" />
    <option name="SHOW_DIALOG" value="false" />
    <option name="HIGHLIGHT_CONFLICTS" value="true" />
    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
    <option name="LAST_RESOLUTION" value="IGNORE" />
  </component>
  <component name="DepsProjectDetails">
    <option name="cachedModuleDetails">
      <map>
        <entry key="$PROJECT_DIR$/deps.edn">
          <value>
            <ModuleDetails>
              <option name="details" value="{:default {:classpath {&quot;src&quot; {:path-key :paths}, &quot;/Users/ahmetoguzhanengin/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar&quot; {:lib-name org.clojure/clojure}, &quot;/Users/ahmetoguzhanengin/.m2/repository/org/clojure/data.json/2.4.0/data.json-2.4.0.jar&quot; {:lib-name org.clojure/data.json}, &quot;/Users/ahmetoguzhanengin/.m2/repository/org/clojure/core.specs.alpha/0.2.62/core.specs.alpha-0.2.62.jar&quot; {:lib-name org.clojure/core.specs.alpha}, &quot;/Users/ahmetoguzhanengin/.m2/repository/org/clojure/spec.alpha/0.3.218/spec.alpha-0.3.218.jar&quot; {:lib-name org.clojure/spec.alpha}}, :basis-config {}, :mvn/repos {&quot;central&quot; {:url &quot;https://repo1.maven.org/maven2/&quot;}, &quot;clojars&quot; {:url &quot;https://repo.clojars.org/&quot;}}, :paths [&quot;src&quot;], :classpath-roots [&quot;src&quot; &quot;/Users/ahmetoguzhanengin/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar&quot; &quot;/Users/ahmetoguzhanengin/.m2/repository/org/clojure/data.json/2.4.0/data.json-2.4.0.jar&quot; &quot;/Users/ahmetoguzhanengin/.m2/repository/org/clojure/core.specs.alpha/0.2.62/core.specs.alpha-0.2.62.jar&quot; &quot;/Users/ahmetoguzhanengin/.m2/repository/org/clojure/spec.alpha/0.3.218/spec.alpha-0.3.218.jar&quot;], :config-paths [&quot;/Users/ahmetoguzhanengin/.deps.clj/1.11.1.1403/ClojureTools/deps.edn&quot; &quot;/Users/ahmetoguzhanengin/.clojure/deps.edn&quot; &quot;/Users/ahmetoguzhanengin/Library/CloudStorage/GoogleDrive-ahmetoguzhanengin@gmail.com/.shortcut-targets-by-id/1MVLjOzfNXnybX8FKc3bDpLYXD4psqU9_/grsm/opal/ekip/ahmetoguzhanengin/clojure-study-05/deps.edn&quot;], :alias-scopes {:system #{:test :deps}, :user #{}, :project #{}}, :alias-types {:deps :tool}, :libs {org.clojure/clojure {:mvn/version &quot;1.11.1&quot;, :deps/manifest :mvn, :parents #{[]}, :paths [&quot;/Users/ahmetoguzhanengin/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar&quot;]}, org.clojure/data.json {:mvn/version &quot;2.4.0&quot;, :deps/manifest :mvn, :parents #{[]}, :paths [&quot;/Users/ahmetoguzhanengin/.m2/repository/org/clojure/data.json/2.4.0/data.json-2.4.0.jar&quot;]}, org.clojure/spec.alpha {:mvn/version &quot;0.3.218&quot;, :deps/manifest :mvn, :dependents [org.clojure/clojure], :parents #{[org.clojure/clojure]}, :paths [&quot;/Users/ahmetoguzhanengin/.m2/repository/org/clojure/spec.alpha/0.3.218/spec.alpha-0.3.218.jar&quot;]}, org.clojure/core.specs.alpha {:mvn/version &quot;0.2.62&quot;, :deps/manifest :mvn, :dependents [org.clojure/clojure], :parents #{[org.clojure/clojure]}, :paths [&quot;/Users/ahmetoguzhanengin/.m2/repository/org/clojure/core.specs.alpha/0.2.62/core.specs.alpha-0.2.62.jar&quot;]}}, :aliases {:deps {:replace-paths [], :replace-deps {org.clojure/tools.deps.cli {:mvn/version &quot;0.9.43&quot;}}, :ns-default clojure.tools.deps.cli.api, :ns-aliases {help clojure.tools.deps.cli.help}}, :test {:extra-paths [&quot;test&quot;]}}, :deps {org.clojure/clojure {:mvn/version &quot;1.11.1&quot;}, org.clojure/data.json {:mvn/version &quot;2.4.0&quot;}}}, :aliases {:classpath {&quot;test&quot; {:path-key :extra-paths}, &quot;src&quot; {:path-key :paths}, &quot;/Users/ahmetoguzhanengin/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar&quot; {:lib-name org.clojure/clojure}, &quot;/Users/ahmetoguzhanengin/.m2/repository/org/clojure/data.json/2.4.0/data.json-2.4.0.jar&quot; {:lib-name org.clojure/data.json}, &quot;/Users/ahmetoguzhanengin/.m2/repository/org/clojure/core.specs.alpha/0.2.62/core.specs.alpha-0.2.62.jar&quot; {:lib-name org.clojure/core.specs.alpha}, &quot;/Users/ahmetoguzhanengin/.m2/repository/org/clojure/spec.alpha/0.3.218/spec.alpha-0.3.218.jar&quot; {:lib-name org.clojure/spec.alpha}}, :basis-config {:aliases [:test]}, :mvn/repos {&quot;central&quot; {:url &quot;https://repo1.maven.org/maven2/&quot;}, &quot;clojars&quot; {:url &quot;https://repo.clojars.org/&quot;}}, :argmap {:extra-paths [&quot;test&quot;]}, :paths [&quot;src&quot;], :classpath-roots [&quot;test&quot; &quot;src&quot; &quot;/Users/ahmetoguzhanengin/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar&quot; &quot;/Users/ahmetoguzhanengin/.m2/repository/org/clojure/data.json/2.4.0/data.json-2.4.0.jar&quot; &quot;/Users/ahmetoguzhanengin/.m2/repository/org/clojure/core.specs.alpha/0.2.62/core.specs.alpha-0.2.62.jar&quot; &quot;/Users/ahmetoguzhanengin/.m2/repository/org/clojure/spec.alpha/0.3.218/spec.alpha-0.3.218.jar&quot;], :config-paths [&quot;/Users/ahmetoguzhanengin/.deps.clj/1.11.1.1403/ClojureTools/deps.edn&quot; &quot;/Users/ahmetoguzhanengin/.clojure/deps.edn&quot; &quot;/Users/ahmetoguzhanengin/Library/CloudStorage/GoogleDrive-ahmetoguzhanengin@gmail.com/.shortcut-targets-by-id/1MVLjOzfNXnybX8FKc3bDpLYXD4psqU9_/grsm/opal/ekip/ahmetoguzhanengin/clojure-study-05/deps.edn&quot;], :alias-scopes {:system #{:test :deps}, :user #{}, :project #{}}, :alias-types {:deps :tool}, :libs {org.clojure/clojure {:mvn/version &quot;1.11.1&quot;, :deps/manifest :mvn, :parents #{[]}, :paths [&quot;/Users/ahmetoguzhanengin/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar&quot;]}, org.clojure/data.json {:mvn/version &quot;2.4.0&quot;, :deps/manifest :mvn, :parents #{[]}, :paths [&quot;/Users/ahmetoguzhanengin/.m2/repository/org/clojure/data.json/2.4.0/data.json-2.4.0.jar&quot;]}, org.clojure/spec.alpha {:mvn/version &quot;0.3.218&quot;, :deps/manifest :mvn, :dependents [org.clojure/clojure], :parents #{[org.clojure/clojure]}, :paths [&quot;/Users/ahmetoguzhanengin/.m2/repository/org/clojure/spec.alpha/0.3.218/spec.alpha-0.3.218.jar&quot;]}, org.clojure/core.specs.alpha {:mvn/version &quot;0.2.62&quot;, :deps/manifest :mvn, :dependents [org.clojure/clojure], :parents #{[org.clojure/clojure]}, :paths [&quot;/Users/ahmetoguzhanengin/.m2/repository/org/clojure/core.specs.alpha/0.2.62/core.specs.alpha-0.2.62.jar&quot;]}}, :aliases {:deps {:replace-paths [], :replace-deps {org.clojure/tools.deps.cli {:mvn/version &quot;0.9.43&quot;}}, :ns-default clojure.tools.deps.cli.api, :ns-aliases {help clojure.tools.deps.cli.help}}, :test {:extra-paths [&quot;test&quot;]}}, :deps {org.clojure/clojure {:mvn/version &quot;1.11.1&quot;}, org.clojure/data.json {:mvn/version &quot;2.4.0&quot;}}}}" />
              <option name="hash" value="92ddbb0ef2bb3ac39fd1289cfeb08ba9" />
            </ModuleDetails>
          </value>
        </entry>
      </map>
    </option>
  </component>
  <component name="FileTemplateManagerImpl">
    <option name="RECENT_TEMPLATES">
      <list>
        <option value="Clojure Namespace" />
      </list>
    </option>
  </component>
  <component name="ProjectColorInfo">{
  &quot;associatedIndex&quot;: 0
}</component>
  <component name="ProjectId" id="2W9ijjPE75yjTaflJq95HZb3HLN" />
  <component name="ProjectViewState">
    <option name="hideEmptyMiddlePackages" value="true" />
    <option name="showLibraryContents" value="true" />
  </component>
  <component name="PropertiesComponent">{
  &quot;keyToString&quot;: {
    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,
    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,
    &quot;cursive.last.file.extension./Users/ahmetoguzhanengin/Library/CloudStorage/GoogleDrive-ahmetoguzhanengin@gmail.com/.shortcut-targets-by-id/1MVLjOzfNXnybX8FKc3bDpLYXD4psqU9_/grsm/opal/ekip/ahmetoguzhanengin/clojure-study-05/src&quot;: &quot;clj&quot;
  }
}</component>
  <component name="ReplState" timestamp="1696442475103">{:repl-history {:ide [], :local [{:command &quot;(-&gt;&gt; system \n     (:person)\n     )&quot;, :offset 34, :ns &quot;ex06&quot;} {:command &quot;(-&gt;&gt; system \n     (:person)\n     (filter #(= (:person/id 1) %1))\n     )&quot;, :offset 71, :ns &quot;ex06&quot;} {:command &quot;(-&gt;&gt; system\n     (:person)\n     (filter #(= (:person/id %1) 1))\n     )&quot;, :offset 70, :ns &quot;ex06&quot;} {:command &quot;(-&gt;&gt; system\n     (:person)\n     (filter #(= (:person/id %1) 1))\n     (first)\n     )&quot;, :offset 83, :ns &quot;ex06&quot;} {:command &quot;(-&gt;&gt; system\n     (:person)\n     (filter #(= (:person/id %1) 1))\n     (first)\n     (:experience)\n     )&quot;, :offset 102, :ns &quot;ex06&quot;} {:command &quot;(-&gt;&gt; system\n     (:person)\n     (filter #(= (:person/id %1) 1))\n     (first)\n     (:experience)\n     (map #(-&gt;&gt; system\n                (:relation/experience)\n                ))\n     )&quot;, :offset 183, :ns &quot;ex06&quot;} {:command &quot;(-&gt;&gt; system\n     (:person)\n     (filter #(= (:person/id %1) 1))\n     (first)\n     (:experience)\n            (-&gt;&gt; system\n                 (:relation/experience)\n                 (filter (fn [m] (= (:experience/starter m) %1)))\n                 (first)\n                 ))&quot;, :offset 270, :ns &quot;ex06&quot;} {:command &quot;(-&gt;&gt; system\n     (:person)\n     (filter #(= (:person/id %1) 1))\n     (first)\n     (:experience)\n            (-&gt;&gt; system\n                 (:relation/experience)\n                 (filter (fn [m] (= (:experience/starter m) %1)))\n                 (first)\n                 (:experience-time-period)\n                 ))&quot;, :offset 313, :ns &quot;ex06&quot;} {:command &quot;(-&gt;&gt; mapExp2\n     (:users)\n     (filter #(= (:name %1) \&quot;Ahmet\&quot;) )\n     (first)\n     (:experience)\n     (map #(-&gt;&gt; mapExp2\n                (:experiences)\n                (filter (fn [m] (= (:id m) %)))\n                (first)\n                (:level)\n                ))\n     )&quot;, :offset 275, :ns &quot;ex03&quot;} {:command &quot;(-&gt;&gt; system\n     (:person)\n     (filter #(= (:person/id %1) 1))\n     (first)\n     (:experience)\n            (-&gt;&gt; system\n                 (:relation/experience)\n                 (filter (fn [m] (= (:experience/starter m) %)))\n                 (first)\n                 (:experience-time-period)\n                 ))&quot;, :offset 312, :ns &quot;ex06&quot;} {:command &quot;(-&gt;&gt; system\n     (:person)\n     (filter #(= (:person/id %1) 1))\n     (first)\n     (:experience)\n            (-&gt;&gt; system\n                 (:relation/experience)\n                 ))&quot;, :offset 179, :ns &quot;ex06&quot;} {:command &quot;(-&gt;&gt; system\n     (:person)\n     (filter #(= (:person/id %1) 1))\n     (first)\n     (:experience)\n            (-&gt;&gt; system\n                 (:relation/experience)\n                 (first)\n                 ))&quot;, :offset 204, :ns &quot;ex06&quot;} {:command &quot;(-&gt;&gt; system\n     (:person)\n     (filter #(= (:person/id %1) 1))\n     (first)\n     (:experience)\n            (-&gt;&gt; system\n                 (:relation/experience)\n                 (first)\n                 (:experience-time-period)\n                 ))&quot;, :offset 247, :ns &quot;ex06&quot;} {:command &quot;(-&gt;&gt; system\n     (:person)\n     (filter #(= (:person/id %1) 1))\n     (first)\n     (:experience)\n            (-&gt;&gt; system\n                 (:relation/experience)\n                 (first)\n                 (:experience-time-period)\n                 (first)\n                 ))&quot;, :offset 272, :ns &quot;ex06&quot;} {:command &quot;(-&gt;&gt; system\n     (:person)\n     (filter #(= (:person/id %1) 1))\n     (first)\n     (:experience)\n            (-&gt;&gt; system\n                 (:relation/experience)\n                 \n                 (:experience-time-period)\n                 (first)\n                 ))&quot;, :offset 265, :ns &quot;ex06&quot;} {:command &quot;(-&gt;&gt; system\n     (:person)\n     (filter #(= (:person/id %1) 1))\n     (first)\n     (:experience)\n            (-&gt;&gt; system\n                 (:relation/experience)\n                 \n                 (:experience-time-period)\n                 \n                 ))&quot;, :offset 258, :ns &quot;ex06&quot;} {:command &quot;(-&gt;&gt; system\n     (:person)\n     (filter #(= (:person/id %1) 1))\n     (first)\n     (:experience)\n            (map #(-&gt;&gt; system\n                       (:relation/experience)\n\n                       \n                       )))&quot;, :offset 223, :ns &quot;ex06&quot;} {:command &quot;(-&gt;&gt; system\n     (:person)\n     (filter #(= (:person/id %1) 1))\n     (first)\n     (:experience)\n            (map #(-&gt;&gt; system\n                       (:relation/experience)\n                       (filter (fn [m] (= (:experience/starter m) %)))\n                       (first)\n                       (:experience-time-period)\n                       )))&quot;, :offset 349, :ns &quot;ex06&quot;} {:command &quot;(-&gt;&gt; system\n     (:person)\n     (filter #(= (:person/id %1) 1))\n     (first)\n     (:experience)\n            (map #(-&gt;&gt; system\n                       (:relation/experience)\n                       (:experience/starter)\n                       )))&quot;, :offset 243, :ns &quot;ex06&quot;} {:command &quot;(-&gt;&gt; system\n     (:person)\n     (filter #(= (:person/id %1) 1))\n     (first)\n     (:experience)\n            (map #(-&gt;&gt; system\n                       (:relation/experience)\n                       (:experience/starter)\n                       (:experience-time-period)\n                       )))&quot;, :offset 292, :ns &quot;ex06&quot;} {:command &quot;(-&gt;&gt; system\n     (:person)\n     (filter #(= (:person/id %1) 1))\n     (first)\n     (:experience)\n     (-&gt;&gt; (get-in system [:relation/experience %1]))\n     (:experience-time-period)\n     )&quot;, :offset 186, :ns &quot;ex06&quot;} {:command &quot;(def system { :person [{:person/id 1 :name \&quot;Ahmet\&quot; :surname \&quot;Engin\&quot; :joindate \&quot;01.10.2023\&quot; :experience :experience/starter :worktime :worktime/part-time :work-type :work-type/internship :managers {:manager/id 1}}\n                       {:person/id 2 :name \&quot;Hilal\&quot; :surname \&quot;Hatunoğlu\&quot; :joindate \&quot;02.10.2023\&quot; :experience :experience/mid :worktime :worktime/full-time :work-type :work-type/tenure :managers {:manager/id 1}}\n                       {:person/id 3 :name \&quot;Metin\&quot; :surname \&quot;Bağdatlı\&quot; :joindate \&quot;03.10.2023\&quot; :experience :experience/senior :worktime :worktime/full-time :work-type :work-type/tenure :managers {:manager/id 1}}\n                       {:person/id 4 :name \&quot;Can\&quot; :surname \&quot;Duyar\&quot; :joindate \&quot;04.10.2023\&quot; :experience :experience/mid :worktime :worktime/full-time :work-type :work-type/tenure :managers {:manager/id 2}}\n                       {:person/id 5 :name \&quot;Evren\&quot; :surname \&quot;Çetinkaya\&quot; :joindate \&quot;05.10.2023\&quot; :experience :experience/senior :worktime :worktime/full-time :work-type :work-type/tenure :managers {:manager/id 2}}\n                       ]\n\n\n\n             :relation/experience {:experience/starter {:experience-time-period \&quot;0-1\&quot;}\n                                   :experience/mid {:experience-time-period \&quot;1-3\&quot;}\n                                   :experience/senior {:experience-time-period \&quot;3-6\&quot;}\n                                   :experience/lead {:experience-time-period \&quot;6+\&quot;}}\n\n             :relations/worktime  #{:worktime/full-time :worktime/part-time}\n             :relations/work-type #{:work-type/internship :work-type/tenure}\n\n             :employess/team [:frontend [{:person/id 3} {:person/id 2}]\n                              :backend [{:person/id 5}]\n                              :fullstack [{:person/id 1}]\n                              :data[{:person/id 4}]\n                              ]\n             :employees/managers [{:manager/id 1 :manager/name \&quot;Mert\&quot; :manager/surname \&quot;Nuhoğlu\&quot; :manager/person [{:person/id 1} {:person/id 2} {:person/id 3}]}\n                                  {:manager/id 2 :manager/name \&quot;Barış\&quot; :manager/surname \&quot;Şenyeli\&quot; :manager/person [{:person/id 4} {:person/id 5}]}]}\n\n  )&quot;, :offset 2156, :ns &quot;ex06&quot;} {:command &quot;(-&gt;&gt; system\n     (:person)\n     (filter #(= (:person/id %1) 1))\n     (first)\n     (:experience)\n     (-&gt;&gt; (get-in system [:relation/experience %]))\n     (:experience-time-period)\n     )&quot;, :offset 185, :ns &quot;ex06&quot;} {:command &quot;(-&gt;&gt; system\n     (:person)\n     (filter #(= (:person/id (first %)) 1))\n     (first)\n     (:experience)\n     (-&gt;&gt; (get-in system [:relation/experience (-&gt;&gt; system (:person) (filter #(= (:person/id (first %)) 1)) (first) (:experience))]))\n     (:experience-time-period)\n     )&quot;, :offset 274, :ns &quot;ex06&quot;} {:command &quot;(-&gt;&gt; system\n     (:person)\n     (filter #(= (:person/id %) 1))\n     (first)\n     (:experience)\n     (-&gt;&gt; (get-in system [:relation/experience (-&gt;&gt; system (:person) (filter #(= (:person/id %) 1)) (first) (:experience))]))\n     (:experience-time-period)\n     )&quot;, :offset 258, :ns &quot;ex06&quot;} {:command &quot;(-&gt;&gt; system\n     (:person)\n     (filter #(= (:person/id %) 1))\n     (first)\n     (:experience)\n     (get-in system [:relation/experience (-&gt;&gt; system (:person) (filter #(= (:person/id %) 1)) (first) (:experience))])\n     (:experience-time-period)\n     )&quot;, :offset 252, :ns &quot;ex06&quot;} {:command &quot;(-&gt;&gt; system\n     (get-in [:person \n              (-&gt;&gt; system \n                   :person \n                   (filter #(= 1 (:person/id %))) first :experience)])\n     (get-in [:relation/experience % :experience-time-period])\n     )&quot;, :offset 230, :ns &quot;ex06&quot;} {:command &quot;(-&gt;&gt; system\n     (get-in [:person\n              (-&gt;&gt; system\n                   :person\n                   (filter #(= 1 (:person/id %))) (first) :experience)])\n     (get-in [:relation/experience % :experience-time-period])\n     )&quot;, :offset 229, :ns &quot;ex06&quot;} {:command &quot;(get-in system [:relation/experience (:experience (first (filter #(= 1 (:person/id %)) (:person system)))) :experience-time-period])&quot;, :offset 132, :ns &quot;ex06&quot;} {:command &quot;(-&gt;&gt; system\n     (:person))&quot;, :offset 27, :ns &quot;ex06&quot;} {:command &quot;(-&gt;&gt; system\n     (:person)\n     (filter #(-&gt; (:name %1)\n                  (= \&quot;Ahmet\&quot;))))&quot;, :offset 88, :ns &quot;ex06&quot;} {:command &quot;(def p1\n  (-&gt;&gt; system\n       (:person)\n       (filter #(-&gt; (:name %1)\n                    (= \&quot;Ahmet\&quot;)))\n       (first)))&quot;, :offset 120, :ns &quot;ex06&quot;} {:command &quot;(identity p1)&quot;, :offset 13, :ns &quot;ex06&quot;} {:command &quot;(-&gt;&gt; p1\n     (:managers))&quot;, :offset 25, :ns &quot;ex06&quot;} {:command &quot;(-&gt;&gt; p1\n     (:managers)\n     (:manager/id))&quot;, :offset 44, :ns &quot;ex06&quot;} {:command &quot;(identity ms)&quot;, :offset 13, :ns &quot;ex06&quot;} {:command &quot;(print ms)&quot;, :offset 10, :ns &quot;ex06&quot;}], :remote []}}</component>
  <component name="RunManager">
    <configuration default="true" type="Babashka" factoryName="BabashkaLocalRepl" activateToolWindowBeforeRun="false">
      <setting name="displayName" value="" />
      <setting name="bbPath" value="" />
      <setting name="parameters" value="" />
      <option name="PARENT_ENVS" value="true" />
      <setting name="workingDir" value="" />
      <setting name="focusEditor" value="false" />
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <configuration name="REPL" type="ClojureREPL" factoryName="Local" activateToolWindowBeforeRun="false">
      <option name="configVersion" value="1" />
      <option name="displayName" value="REPL" />
      <option name="execution" value="DEPS" />
      <module name="clojure-study-05" />
      <option name="options" />
      <option name="profiles" />
      <option name="WORKING_DIRECTORY" value="$PROJECT_DIR$" />
      <method v="2" />
    </configuration>
    <configuration default="true" type="ClojureREPL" factoryName="Local" activateToolWindowBeforeRun="false">
      <option name="configVersion" value="1" />
      <option name="options" />
      <option name="profiles" />
      <method v="2" />
    </configuration>
    <configuration default="true" type="ClojureREPL" factoryName="Remote" activateToolWindowBeforeRun="false">
      <setting name="displayName" value="" />
      <setting name="host" value="" />
      <setting name="port" value="0" />
      <setting name="replType" value="SOCKET" />
      <setting name="configType" value="SPECIFY" />
      <setting name="replPortFileType" value="STANDARD" />
      <setting name="customPortFile" value="" />
      <setting name="fixLineNumbers" value="false" />
      <setting name="focusEditor" value="false" />
      <method v="2" />
    </configuration>
  </component>
  <component name="SpellCheckerSettings" RuntimeDictionaries="0" Folders="0" CustomDictionaries="0" DefaultDictionary="application-level" UseSingleDictionary="true" transferred="true" />
  <component name="TaskManager">
    <task active="true" id="Default" summary="Default task">
      <changelist id="25e906b7-a31e-44da-864f-8e8d2e26e484" name="Changes" comment="" />
      <created>1696151339239</created>
      <option name="number" value="Default" />
      <option name="presentableId" value="Default" />
      <updated>1696151339239</updated>
    </task>
    <servers />
  </component>
</project>